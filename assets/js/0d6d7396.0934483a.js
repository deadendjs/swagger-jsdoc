"use strict";(globalThis.webpackChunkgh_pages=globalThis.webpackChunkgh_pages||[]).push([[994],{576:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Contributing/project-goals","title":"Project Goals","description":"swagger-jsdoc enables you to integrate Swagger using JSDoc comments in your code. Just add @swagger (or @openapi) on top of an API-related annotation and and describe the given API part in YAML syntax. It\'s possible to pass YAML files directly outside the annotated source code.","source":"@site/versioned_docs/version-8.x/Contributing/project-goals.md","sourceDirName":"Contributing","slug":"/Contributing/project-goals","permalink":"/swagger-jsdoc/docs/Contributing/project-goals","draft":false,"unlisted":false,"editUrl":"https://github.com/deadendjs/swagger-jsdoc/tree/master/docusaurus/versioned_docs/version-8.x/Contributing/project-goals.md","tags":[],"version":"8.x","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Project Goals"},"sidebar":"tutorialSidebar","previous":{"title":"Contributing","permalink":"/swagger-jsdoc/docs/category/contributing"},"next":{"title":"Fundamental concepts","permalink":"/swagger-jsdoc/docs/Contributing/fundamental-concepts"}}');var n=o(4848),i=o(8453);const r={sidebar_position:4,title:"Project Goals"},a="Project Goals",c={},d=[{value:"What swagger-jsdoc is NOT (doing)",id:"what-swagger-jsdoc-is-not-doing",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"project-goals",children:"Project Goals"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"swagger-jsdoc"})," enables you to integrate ",(0,n.jsx)(t.a,{href:"http://swagger.io",children:"Swagger"})," using ",(0,n.jsx)(t.a,{href:"https://jsdoc.app/",children:(0,n.jsx)(t.code,{children:"JSDoc"})})," comments in your code. Just add ",(0,n.jsx)(t.code,{children:"@swagger"})," (or ",(0,n.jsx)(t.code,{children:"@openapi"}),") on top of an API-related annotation and and describe the given API part in YAML syntax. It's possible to pass YAML files directly outside the annotated source code."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"swagger-jsdoc"})," will parse the above-mentioned parts of your desired specification and will output a single file. You can use it to integrate any server and client technology as long as both sides comply with the specification."]}),"\n",(0,n.jsxs)(t.p,{children:["Thus, the ",(0,n.jsx)(t.code,{children:"swagger-jsdoc"}),' library helps you document existing/living/working code in a way to "give life" to it, generating a specification which can then be fed into other Swagger tools, and not the vice-versa.']}),"\n",(0,n.jsx)(t.p,{children:"If you prefer to write the OpenAPI specification first and separately, you might check other projects facilitating this, such as"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"http://swagger.io/swagger-editor/",children:"swagger-editor"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/swagger-api/swagger-node",children:"swagger-node"})}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"what-swagger-jsdoc-is-not-doing",children:"What swagger-jsdoc is NOT (doing)"}),"\n",(0,n.jsxs)(t.p,{children:["The library does not add logic (implementation) to your specification. It is based on code annotations or static YAML files, but not the logic itself. If you use ",(0,n.jsx)(t.a,{href:"https://swagger.io/tools/swagger-ui/",children:"Swagger UI"})," or a similar tools to test your API and you receive errors, unexpected results and mystical data, it's not because of swagger-jsdoc library. It works only with what you put around your logic, not the contents of the logic."]})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var s=o(6540);const n={},i=s.createContext(n);function r(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);