"use strict";(globalThis.webpackChunkgh_pages=globalThis.webpackChunkgh_pages||[]).push([[976],{2053:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"intro","title":"Intro","description":"This library reads your JSDoc-annotated source code and generates an OpenAPI (Swagger) specification.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/swagger-jsdoc/docs/next/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/deadendjs/swagger-jsdoc/tree/master/docusaurus/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Intro"},"sidebar":"tutorialSidebar"}');var t=s(4848),o=s(8453);const r={sidebar_position:1,title:"Intro"},a="swagger-jsdoc",c={},d=[{value:"Getting started",id:"getting-started",level:2},{value:"System requirements",id:"system-requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Supported specifications",id:"supported-specifications",level:2},{value:"Validation of swagger docs",id:"validation-of-swagger-docs",level:2},{value:"Documentation",id:"documentation",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"swagger-jsdoc",children:"swagger-jsdoc"})}),"\n",(0,t.jsxs)(n.p,{children:["This library reads your ",(0,t.jsx)(n.a,{href:"https://jsdoc.app/",children:"JSDoc"}),"-annotated source code and generates an ",(0,t.jsx)(n.a,{href:"https://swagger.io/specification/",children:"OpenAPI (Swagger) specification"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://sonarcloud.io/summary/new_code?id=deadendjs_swagger-jsdoc",children:(0,t.jsx)(n.img,{src:"https://sonarcloud.io/api/project_badges/measure?project=deadendjs_swagger-jsdoc&metric=alert_status",alt:"Quality Gate Status"})}),"\n",(0,t.jsx)(n.img,{src:"https://github.com/deadendjs/swagger-jsdoc/workflows/CI/badge.svg",alt:"CI"})]}),"\n",(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,t.jsx)(n.p,{children:"Imagine having API files like these:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"/**\n * @openapi\n * /:\n *   get:\n *     description: Welcome to swagger-jsdoc!\n *     responses:\n *       200:\n *         description: Returns a mysterious string.\n */\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The library will take the contents of ",(0,t.jsx)(n.code,{children:"@openapi"})," (or ",(0,t.jsx)(n.code,{children:"@swagger"}),") with the following configuration:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const swaggerJsdoc = require('@deadendjs/swagger-jsdoc');\n\nconst options = {\n  definition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'Hello World',\n      version: '1.0.0'\n    }\n  },\n  apis: ['./src/routes*.js'] // files containing annotations as above\n};\n\nconst openapiSpecification = await swaggerJsdoc(options);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The resulting ",(0,t.jsx)(n.code,{children:"openapiSpecification"})," will be a ",(0,t.jsx)(n.a,{href:"https://swagger.io/tools/",children:"swagger tools"}),"-compatible (and validated) specification."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"swagger-jsdoc example screenshot",src:s(5091).A+"",width:"1440",height:"738"})}),"\n",(0,t.jsx)(n.h2,{id:"system-requirements",children:"System requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Node.js 20.x or higher"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You are viewing ",(0,t.jsx)(n.code,{children:"swagger-jsdoc"})," v8 which is published in CommonJS module system."]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @deadendjs/swagger-jsdoc --save\n"})}),"\n",(0,t.jsx)(n.h2,{id:"supported-specifications",children:"Supported specifications"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"OpenAPI 3.x"}),"\n",(0,t.jsx)(n.li,{children:"Swagger 2"}),"\n",(0,t.jsx)(n.li,{children:"AsyncAPI 2.0"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"validation-of-swagger-docs",children:"Validation of swagger docs"}),"\n",(0,t.jsxs)(n.p,{children:["By default ",(0,t.jsx)(n.code,{children:"swagger-jsdoc"})," tries to parse all docs to it's best capabilities. If you'd like to you can instruct an Error to be thrown instead if validation failed by setting the options flag ",(0,t.jsx)(n.code,{children:"failOnErrors"})," to ",(0,t.jsx)(n.code,{children:"true"}),". This is for instance useful if you want to verify that your swagger docs validate using a unit test."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const swaggerJsdoc = require('@deadendjs/swagger-jsdoc');\n\nconst options = {\n  failOnErrors: true, // Whether or not to throw when parsing errors. Defaults to false.\n  definition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'Hello World',\n      version: '1.0.0'\n    }\n  },\n  apis: ['./src/routes*.js']\n};\n\nconst openapiSpecification = await swaggerJsdoc(options);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsx)(n.p,{children:"Click on the version you are using from navigation bar for further details."})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},5091:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/screenshot-cc889624d956029c8cf5713d1f399060.png"},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);